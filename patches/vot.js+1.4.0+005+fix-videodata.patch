diff --git a/node_modules/vot.js/dist/utils/videoData.d.ts b/node_modules/vot.js/dist/utils/videoData.d.ts
index 64c9c0d..9cfce23 100644
--- a/node_modules/vot.js/dist/utils/videoData.d.ts
+++ b/node_modules/vot.js/dist/utils/videoData.d.ts
@@ -1,6 +1,6 @@
 import { ServiceConf } from "../types/yandex.js";
 import { GetVideoDataOpts, VideoData } from "../types/client.js";
-export declare function getService(videoUrl: string): false | ServiceConf | undefined;
-export declare function getVideoID(service: ServiceConf, videoURL: string, opts?: GetVideoDataOpts): Promise<string | undefined>;
-export declare function getVideoData(url: string, opts?: GetVideoDataOpts): Promise<VideoData>;
+export declare function getService(): false | ServiceConf | undefined;
+export declare function getVideoID(service: ServiceConf, video: HTMLVideoElement, opts?: GetVideoDataOpts): Promise<string | undefined>;
+export declare function getVideoData(service: ServiceConf, video: HTMLVideoElement, opts?: GetVideoDataOpts): Promise<VideoData>;
 //# sourceMappingURL=videoData.d.ts.map
\ No newline at end of file
diff --git a/node_modules/vot.js/dist/utils/videoData.js b/node_modules/vot.js/dist/utils/videoData.js
index 1f65186..9856a64 100644
--- a/node_modules/vot.js/dist/utils/videoData.js
+++ b/node_modules/vot.js/dist/utils/videoData.js
@@ -1,7 +1,6 @@
 import sites from "../config/sites.js";
 import { VideoService } from "../types/yandex.js";
 import VideoHelper, { availableHelpers, } from "../helpers/index.js";
-import Logger from "./logger.js";
 class VideoDataError extends Error {
     constructor(message) {
         super(message);
@@ -9,18 +8,11 @@ class VideoDataError extends Error {
         this.message = message;
     }
 }
-export function getService(videoUrl) {
-    if (/(file:\/\/|(http(s)?:\/\/)(127\.0\.0\.1|localhost))/.exec(videoUrl))
-        return false;
-    let enteredURL;
-    try {
-        enteredURL = new URL(videoUrl);
-    }
-    catch {
-        Logger.error(`Invalid URL: ${videoUrl}. Have you forgotten https?`);
-        return false;
-    }
-    const hostname = enteredURL.hostname;
+export function getService() {
+    if (/(http(s)?:\/\/)(127\.0\.0\.1|localhost)/.exec(window.location.href))
+        return [];
+    const hostname = window.location.hostname;
+    const enteredURL = new URL(window.location);
     const isMathes = (match) => {
         if (match instanceof RegExp) {
             return match.test(hostname);
@@ -33,14 +25,14 @@ export function getService(videoUrl) {
         }
         return false;
     };
-    return sites.find((e) => {
+    return sites.filter((e) => {
         return ((Array.isArray(e.match) ? e.match.some(isMathes) : isMathes(e.match)) &&
             e.host &&
             e.url);
     });
 }
-export async function getVideoID(service, videoURL, opts = {}) {
-    const url = new URL(videoURL);
+export async function getVideoID(service, video, opts = {}) {
+    const url = new URL(window.location.href);
     const serviceHost = service.host;
     if (Object.keys(availableHelpers).includes(serviceHost)) {
         const helper = new VideoHelper(opts).getHelper(serviceHost);
@@ -48,16 +40,12 @@ export async function getVideoID(service, videoURL, opts = {}) {
     }
     return serviceHost === VideoService.custom ? url.href : undefined;
 }
-export async function getVideoData(url, opts = {}) {
-    const service = getService(url);
-    if (!service) {
-        throw new VideoDataError(`URL: "${url}" is unknown service`);
-    }
-    const videoId = await getVideoID(service, url, opts);
+export async function getVideoData(service, video, opts = {}) {
+    const videoId = await getVideoID(service, video, opts);
     if (!videoId) {
-        throw new VideoDataError(`Entered unsupported link: "${url}"`);
+        throw new VideoDataError(`Entered unsupported link: "${service.host}"`);
     }
-    const origin = new URL(url).origin;
+    const origin = window.location.origin;
     if ([VideoService.peertube, VideoService.coursehunterLike].includes(service.host)) {
         service.url = origin;
     }
