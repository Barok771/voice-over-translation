diff --git a/node_modules/vot.js/dist/helpers/appledeveloper.js b/node_modules/vot.js/dist/helpers/appledeveloper.js
index 33f8140..dff76fa 100644
--- a/node_modules/vot.js/dist/helpers/appledeveloper.js
+++ b/node_modules/vot.js/dist/helpers/appledeveloper.js
@@ -4,9 +4,7 @@ export default class AppleDeveloperHelper extends BaseHelper {
     API_ORIGIN = "https://developer.apple.com";
     async getVideoData(videoId) {
         try {
-            const res = await this.fetch(`${this.API_ORIGIN}/${videoId}`);
-            const content = await res.text();
-            const contentUrl = /https:\/\/devstreaming-cdn\.apple\.com\/videos\/([^.]+)\/(cmaf\.m3u8)/.exec(content)?.[0];
+            const contentUrl = document.querySelector("meta[property='og:video']")?.content
             if (!contentUrl) {
                 throw new VideoHelperError("Failed to find content url");
             }
diff --git a/node_modules/vot.js/dist/helpers/base.js b/node_modules/vot.js/dist/helpers/base.js
index 5326048..de9c575 100644
--- a/node_modules/vot.js/dist/helpers/base.js
+++ b/node_modules/vot.js/dist/helpers/base.js
@@ -1,4 +1,4 @@
-import { fetchWithTimeout } from "../utils/utils.js";
+import { GM_fetch } from "../../../../src/utils/utils.js";
 export class VideoHelperError extends Error {
     constructor(message) {
         super(message);
@@ -7,17 +7,17 @@ export class VideoHelperError extends Error {
     }
 }
 export class BaseHelper {
-    API_ORIGIN = "https://example.com";
+    API_ORIGIN = window.location.origin;
     fetch;
     extraInfo;
     referer;
     origin;
     service;
-    constructor({ fetchFn = fetchWithTimeout, extraInfo = true, referer = "", origin = "", service, } = {}) {
+    constructor({ fetchFn = GM_fetch, extraInfo = true, referer = document.referrer ?? window.location.origin + "/", origin = window.location.origin, service, } = {}) {
         this.fetch = fetchFn;
         this.extraInfo = extraInfo;
         this.referer = referer;
-        this.origin = /^(http(s)?):\/\//.test(String(origin)) ? origin : "";
+        this.origin = /^(http(s)?):\/\//.test(String(origin)) ? origin : window.location.origin;
         this.service = service;
     }
     async getVideoData(videoId) {
diff --git a/node_modules/vot.js/dist/helpers/coursehunter.js b/node_modules/vot.js/dist/helpers/coursehunter.js
index 3e7181b..a24039b 100644
--- a/node_modules/vot.js/dist/helpers/coursehunter.js
+++ b/node_modules/vot.js/dist/helpers/coursehunter.js
@@ -1,20 +1,12 @@
 import { BaseHelper } from "./base.js";
 export default class CoursehunterHelper extends BaseHelper {
-    API_ORIGIN = "https://coursehunter.net";
-    async getCourseId(videoId) {
-        try {
-            const res = await this.fetch(`${this.API_ORIGIN}/course/${videoId}`);
-            const content = await res.text();
-            return /course_id(\s)?=(\s)?([\d]+)/.exec(content)?.[3];
-        }
-        catch (err) {
-            console.error(`Failed to get Coursehunter courseId by videoId: ${videoId}`, err.message);
-            return false;
-        }
+    API_ORIGIN = "https://coursehunter.net/api/v1";
+    getCourseId(videoId) {
+        return window.course_id ?? +document.querySelector('input[name="course_id"]')?.value;
     }
     async getLessonsData(courseId) {
         try {
-            const res = await this.fetch(`${this.API_ORIGIN}/api/v1/course/${courseId}/lessons`);
+            const res = await this.fetch(`${this.API_ORIGIN}/course/${courseId}/lessons`);
             return (await res.json());
         }
         catch (err) {
@@ -23,15 +15,19 @@ export default class CoursehunterHelper extends BaseHelper {
         }
     }
     async getVideoData(videoId) {
-        const courseId = await this.getCourseId(videoId);
+        const courseId = this.getCourseId(videoId);
         if (!courseId) {
             return undefined;
         }
-        const lessonsData = await this.getLessonsData(courseId);
+        const lessonsData = window.lessons ?? (await this.getLessonsData(courseId));
         if (!lessonsData) {
             return undefined;
         }
-        const lessonId = +(videoId.split("?lesson=")?.[1] ?? 1);
+        const lessonId = +(
+            videoId.split("?lesson=")?.[1] ??
+            document.querySelector(".lessons-item_active")?.dataset?.index ??
+            1
+        );
         const currentLesson = lessonsData?.[lessonId - 1];
         const { file: videoUrl, duration, title } = currentLesson;
         if (!videoUrl) {
diff --git a/node_modules/vot.js/dist/helpers/incestflix.js b/node_modules/vot.js/dist/helpers/incestflix.js
index 0a66568..f7899f0 100644
--- a/node_modules/vot.js/dist/helpers/incestflix.js
+++ b/node_modules/vot.js/dist/helpers/incestflix.js
@@ -1,18 +1,10 @@
-import { parseFromString } from "dom-parser";
 import { BaseHelper, VideoHelperError } from "./base.js";
 import { proxyMedia } from "../utils/utils.js";
 import Logger from "../utils/logger.js";
 export default class IncestflixHelper extends BaseHelper {
     async getVideoData(videoId) {
         try {
-            const res = await this.fetch(this.service?.url + videoId);
-            const content = await res.text();
-            const doc = parseFromString(content.replace("<!DOCTYPE html>", ""));
-            const videoEl = doc.getElementById("incflix-stream");
-            if (!videoEl) {
-                throw new VideoHelperError(`Failed to find video element for videoID ${videoId}`);
-            }
-            const sourceEl = videoEl.getElementsByTagName("source")?.[0];
+            const sourceEl = document.querySelector("#incflix-stream source:first-of-type");
             if (!sourceEl) {
                 throw new VideoHelperError("Failed to find source element");
             }
diff --git a/node_modules/vot.js/dist/helpers/kodik.js b/node_modules/vot.js/dist/helpers/kodik.js
index 462ede7..37483e7 100644
--- a/node_modules/vot.js/dist/helpers/kodik.js
+++ b/node_modules/vot.js/dist/helpers/kodik.js
@@ -1,9 +1,8 @@
-import { parseFromString } from "dom-parser";
 import { BaseHelper, VideoHelperError } from "./base.js";
 import config from "../config/config.js";
 import Logger from "../utils/logger.js";
 export default class KodikHelper extends BaseHelper {
-    API_ORIGIN = "https://kodik.biz";
+    API_ORIGIN = window.location.origin;
     async getSecureData(videoPath) {
         try {
             const res = await this.fetch(`${this.API_ORIGIN}${videoPath}`, {
@@ -15,7 +14,8 @@ export default class KodikHelper extends BaseHelper {
             });
             const content = await res.text();
             const [videoType, videoId, hash] = videoPath.split("/").filter((a) => a);
-            const doc = parseFromString(content);
+            const parser = new DOMParser();
+            const doc = parser.parseFromString(content, "text/html");
             const secureScript = Array.from(doc.getElementsByTagName("script")).filter((s) => s.innerHTML.includes(`videoId = "${videoId}"`));
             if (!secureScript.length) {
                 throw new VideoHelperError("Failed to find secure script");
diff --git a/node_modules/vot.js/dist/helpers/linkedin.js b/node_modules/vot.js/dist/helpers/linkedin.js
index 9f3a065..858cfcf 100644
--- a/node_modules/vot.js/dist/helpers/linkedin.js
+++ b/node_modules/vot.js/dist/helpers/linkedin.js
@@ -1,4 +1,3 @@
-import { parseFromString } from "dom-parser";
 import { BaseHelper, VideoHelperError } from "./base.js";
 import { proxyMedia } from "../utils/utils.js";
 import Logger from "../utils/logger.js";
@@ -6,10 +5,7 @@ export default class LinkedinHelper extends BaseHelper {
     API_ORIGIN = "https://www.linkedin.com/learning";
     async getVideoData(videoId) {
         try {
-            const res = await this.fetch(`${this.API_ORIGIN}/${videoId}`);
-            const content = await res.text();
-            const doc = parseFromString(content.replace("<!DOCTYPE html>", ""));
-            const videoEl = doc.getElementsByClassName("video-js")?.[0];
+            const videoEl = document.querySelector(".video-js");
             if (!videoEl) {
                 throw new VideoHelperError(`Failed to find video element for videoID ${videoId}`);
             }
diff --git a/node_modules/vot.js/dist/helpers/nineanimetv.js b/node_modules/vot.js/dist/helpers/nineanimetv.js
index 430c984..d087668 100644
--- a/node_modules/vot.js/dist/helpers/nineanimetv.js
+++ b/node_modules/vot.js/dist/helpers/nineanimetv.js
@@ -92,6 +92,18 @@ export default class NineAnimeTVHelper extends BaseHelper {
         };
     }
     async getVideoId(url) {
-        return /[^/]+$/.exec(url.href)?.[0];
+        return new Promise(resolve => {
+            const origin = "https://9animetv.to"
+            window.addEventListener("message", (e) => {
+                if (e.origin !== origin) {
+                    return;
+                }
+
+                if (e.data?.startsWith("getVideoId:")) {
+                    resolve(e.data.replace("getVideoId:", ""))
+                }
+            })
+            window.top.postMessage("getVideoId", origin);
+        });
     }
 }
diff --git a/node_modules/vot.js/dist/helpers/porntn.js b/node_modules/vot.js/dist/helpers/porntn.js
index 014550b..9993417 100644
--- a/node_modules/vot.js/dist/helpers/porntn.js
+++ b/node_modules/vot.js/dist/helpers/porntn.js
@@ -1,15 +1,12 @@
-import { parseFromString } from "dom-parser";
 import { BaseHelper, VideoHelperError } from "./base.js";
 import { proxyMedia } from "../utils/utils.js";
 import Logger from "../utils/logger.js";
 export default class PornTNHelper extends BaseHelper {
     async getVideoData(videoId) {
         try {
-            const res = await this.fetch(this.service?.url + videoId);
-            const content = await res.text();
-            const doc = parseFromString(content.replace("<!DOCTYPE html>", ""));
+            const content =  document.body.innerHTML;
             const varDelimiter = /var flashvars\s=\s/;
-            const dataScript = doc
+            const dataScript = document
                 .getElementsByTagName("script")
                 .find((node) => varDelimiter.exec(node.textContent));
             if (!dataScript) {
diff --git a/node_modules/vot.js/dist/helpers/reddit.js b/node_modules/vot.js/dist/helpers/reddit.js
index 3a19bda..56e9cc1 100644
--- a/node_modules/vot.js/dist/helpers/reddit.js
+++ b/node_modules/vot.js/dist/helpers/reddit.js
@@ -4,11 +4,13 @@ export default class RedditHelper extends BaseHelper {
     API_ORIGIN = "https://www.reddit.com";
     async getVideoData(videoId) {
         try {
-            const res = await this.fetch(`${this.API_ORIGIN}/r/${videoId}`);
-            const content = await res.text();
-            const contentUrl = /https:\/\/v\.redd\.it\/([^/]+)\/HLSPlaylist\.m3u8\?([^"]+)/
-                .exec(content)?.[0]
-                ?.replaceAll("&amp;", "&");
+            const contentUrl = this.service.additionalData === "old" ?
+                document
+                    .querySelector("[data-hls-url]")
+                    ?.dataset
+                    .hlsUrl
+                    .replaceAll("&amp;", "&") :
+                document.querySelector("shreddit-player-2")?.src;
             if (!contentUrl) {
                 throw new VideoHelperError("Failed to find content url");
             }
diff --git a/node_modules/vot.js/dist/helpers/sap.js b/node_modules/vot.js/dist/helpers/sap.js
index 6bedd99..05eaf5e 100644
--- a/node_modules/vot.js/dist/helpers/sap.js
+++ b/node_modules/vot.js/dist/helpers/sap.js
@@ -1,4 +1,3 @@
-import { parseFromString } from "dom-parser";
 import { BaseHelper, VideoHelperError } from "./base.js";
 import { normalizeLang } from "../utils/utils.js";
 import Logger from "../utils/logger.js";
@@ -54,21 +53,17 @@ export default class SapHelper extends BaseHelper {
         }
     }
     async getKalturaData(videoId) {
-        const url = `${this.API_ORIGIN}/${videoId}`;
         try {
-            const res = await this.fetch(url);
-            const content = await res.text();
-            const sapData = /https:\/\/([^"]+)\/p\/([^"]+)\/embedPlaykitJs\/uiconf_id\/([^"]+)/.exec(content);
+            const sapData = /https:\/\/([^"]+)\/p\/([^"]+)\/embedPlaykitJs\/uiconf_id\/([^"]+)/.exec(document.querySelector('script[data-nscript="beforeInteractive"]')?.src)
             if (!sapData) {
                 throw new VideoHelperError(`Failed to get sap data for videoId: ${videoId}`);
             }
             const [, kalturaDomain, partnerId] = sapData;
-            const doc = parseFromString(content.replace("<!DOCTYPE html>", ""));
-            let entryId = doc
-                .getElementById("shadow")
+            let entryId = document
+                .querySelector("#shadow")
                 ?.firstChild?.getAttribute("id");
             if (!entryId) {
-                entryId = /"sourceId":\s?"([^"]+)"/.exec(content)?.[1];
+                entryId = /"sourceId":\s?"([^"]+)"/.exec(document.querySelector("#__NEXT_DATA__")?.innerText)?.[1];
             }
             if (!kalturaDomain || Number.isNaN(+partnerId) || !entryId) {
                 throw new VideoHelperError(`One of the necessary parameters for getting a link to a sap video in wasn't found for ${videoId}. Params: kalturaDomain = ${kalturaDomain}, partnerId = ${partnerId}, entryId = ${entryId}`);
diff --git a/node_modules/vot.js/dist/helpers/twitch.js b/node_modules/vot.js/dist/helpers/twitch.js
index 5e6bbc3..ece8494 100644
--- a/node_modules/vot.js/dist/helpers/twitch.js
+++ b/node_modules/vot.js/dist/helpers/twitch.js
@@ -3,26 +3,35 @@ import { BaseHelper, VideoHelperError } from "./base.js";
 export default class TwitchHelper extends BaseHelper {
     API_ORIGIN = "https://clips.twitch.tv";
     async getClipLink(pathname, clipId) {
+        const schema = document.querySelector(
+            "script[type='application/ld+json']",
+        );
         const clearPathname = pathname.slice(1);
-        const isEmbed = clearPathname === "embed";
-        const videoPath = isEmbed ? clipId : clearPathname;
-        try {
-            const res = await this.fetch(`${this.API_ORIGIN}/${videoPath}`, {
-                headers: {
-                    "User-Agent": "Googlebot/2.1 (+http://www.googlebot.com/bot.html)",
-                },
-            });
-            const content = await res.text();
-            const channelLink = /"url":"https:\/\/www\.twitch\.tv\/([^"]+)"/.exec(content);
-            if (!channelLink) {
-                throw new VideoHelperError("Failed to find channel link");
-            }
-            return `${channelLink[1]}/clip/${videoPath}`;
+        if (schema) {
+            const schemaJSON = JSON.parse(schema.innerText);
+            const channelLink = schemaJSON["@graph"].find(
+                (obj) => obj["@type"] === "VideoObject",
+            )?.creator.url;
+
+            const channelName = channelLink.replace("https://www.twitch.tv/", "");
+            return `${channelName}/clip/${clearPathname}`;
         }
-        catch (err) {
-            Logger.error(`Failed to get twitch clip link by pathname: ${pathname} and clip ID: ${clipId}`, err.message);
+        const isEmbed = clearPathname === "embed";
+        const channelLink = document.querySelector(
+            isEmbed
+                ? ".tw-link[data-test-selector='stream-info-card-component__stream-avatar-link']"
+                : ".clips-player a:not([class])",
+        );
+        if (!channelLink) {
             return undefined;
         }
+
+        const channelName = channelLink.href.replace(
+            "https://www.twitch.tv/",
+            "",
+        );
+
+        return `${channelName}/clip/${isEmbed ? clipId : clearPathname}`;
     }
     async getVideoId(url) {
         const pathname = url.pathname;
diff --git a/node_modules/vot.js/dist/helpers/vimeo.js b/node_modules/vot.js/dist/helpers/vimeo.js
index 4c6f30c..dbe4ebf 100644
--- a/node_modules/vot.js/dist/helpers/vimeo.js
+++ b/node_modules/vot.js/dist/helpers/vimeo.js
@@ -1,4 +1,3 @@
-import { parseFromString } from "dom-parser";
 import { BaseHelper, VideoHelperError } from "./base.js";
 import { normalizeLang } from "../utils/utils.js";
 import Logger from "../utils/logger.js";
@@ -92,20 +91,7 @@ export default class VimeoHelper extends BaseHelper {
     }
     async getPrivateVideoInfo(videoId) {
         try {
-            const res = await this.fetch(`${this.SITE_ORIGIN}/${videoId}`, {
-                headers: {
-                    Referer: this.referer,
-                },
-            });
-            const content = await res.text();
-            const doc = parseFromString(content.replace("<!DOCTYPE html>", ""));
-            const playerConfigScript = doc
-                .getElementsByTagName("script")
-                .filter((s) => s.innerHTML.startsWith(`window.playerConfig`))?.[0];
-            if (!playerConfigScript) {
-                throw new VideoHelperError("Failed to find player config script");
-            }
-            const playerConfig = JSON.parse(playerConfigScript.textContent.replace(/window\.playerConfig(\s)?=(\s)?/, ""));
+            // playerConfig is window.playerConfig
             const videoSource = await this.getPrivateVideoSource(playerConfig.request.files);
             if (!videoSource) {
                 throw new VideoHelperError("Failed to get private video source");
diff --git a/node_modules/vot.js/dist/helpers/yandexdisk.d.ts b/node_modules/vot.js/dist/helpers/yandexdisk.d.ts
index 2507c45..c5fe05f 100644
--- a/node_modules/vot.js/dist/helpers/yandexdisk.d.ts
+++ b/node_modules/vot.js/dist/helpers/yandexdisk.d.ts
@@ -1,5 +1,8 @@
 import { BaseHelper } from "./base.js";
 export default class YandexDiskHelper extends BaseHelper {
+    API_ORIGIN: string;
+    CLIENT_PREFIX: string;
+    getVideoData(videoId: string): Promise<MinimalVideoData | undefined>;
     getVideoId(url: URL): Promise<string | undefined>;
 }
 //# sourceMappingURL=yandexdisk.d.ts.map
\ No newline at end of file
diff --git a/node_modules/vot.js/dist/helpers/yandexdisk.js b/node_modules/vot.js/dist/helpers/yandexdisk.js
index 8ecc67a..4bb383d 100644
--- a/node_modules/vot.js/dist/helpers/yandexdisk.js
+++ b/node_modules/vot.js/dist/helpers/yandexdisk.js
@@ -1,6 +1,92 @@
-import { BaseHelper } from "./base.js";
+import { BaseHelper, VideoHelperError } from "./base.js";
+import { VOTLocalizedError } from "../../../../src/utils/VOTLocalizedError.js";
 export default class YandexDiskHelper extends BaseHelper {
+    API_ORIGIN = "https://disk.yandex.ru";
+    CLIENT_PREFIX = "/client/disk";
+    async getVideoData(videoId) {
+        if (!videoId.startsWith(this.CLIENT_PREFIX)) {
+            return {
+                url: this.service.url + videoId,
+            };
+        }
+
+        const url = new URL(window.location);
+        const dialogId = url.searchParams.get("idDialog");
+        if (!dialogId) {
+            return undefined;
+        }
+
+        const preloadedScript = document.querySelector("#preloaded-data");
+        if (!preloadedScript) {
+            return undefined;
+        }
+
+        try {
+            const preloadedData = JSON.parse(preloadedScript.innerText);
+            const { idClient, sk } = preloadedData.config;
+            const res = await this.fetch(this.API_ORIGIN + "/models/?_m=resource", {
+                method: "POST",
+                body: new URLSearchParams({
+                idClient,
+                sk,
+                "_model.0": "resource",
+                "id.0": dialogId.replaceAll(" ", "+"),
+                })
+                .toString()
+                .replaceAll(/%2B/g, "+"), // yandex requires this
+                headers: {
+                "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
+                },
+            });
+
+            const data = await res.json();
+            if (!data.models) {
+                throw new VideoHelperError("Failed to get resource info");
+            }
+
+            const model = data.models[0];
+            const modelData = model.data;
+            if (Object.hasOwn(modelData, "error")) {
+                throw new VideoHelperError(modelData.error?.message);
+            }
+
+            const { meta, name } = modelData;
+            const { short_url, video_info } = meta;
+            if (!video_info) {
+                throw new VideoHelperError("There's no video open right now");
+            }
+
+            if (!short_url) {
+                throw new VideoHelperError("VOTLimitedVideoAccess");
+            }
+
+            const title = name.replace(/(\.[^.]+)$/, "");
+
+            return {
+                url: short_url,
+                title,
+                duration: video_info.duration,
+            };
+        } catch (err) {
+            if (err.message?.startsWith("VOT")) {
+                throw new VOTLocalizedError(err.message);
+            }
+
+            console.error(
+                `Failed to get yandex disk video data by video ID: ${videoId}`,
+                err.message,
+            );
+            return undefined;
+        }
+    }
     async getVideoId(url) {
-        return /\/i\/([^/]+)/.exec(url.pathname)?.[1];
+        const fileId = /\/i\/([^/]+)/.exec(url.pathname)?.[1];
+        if (fileId) {
+            return `i/${fileId}`;
+        }
+
+        return url.pathname.startsWith(this.CLIENT_PREFIX)
+            ? url.pathname + url.search
+            : undefined;
     }
 }
